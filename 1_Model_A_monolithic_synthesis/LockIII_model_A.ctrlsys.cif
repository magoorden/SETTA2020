alg bool cmd_stop = emergencystop.pushed or stop1.pushed or stop2.pushed or stop3.pushed or stop4.pushed;
alg bool cmd_stop_culvert = emergencystop.pushed or stop3.pushed;
alg bool cmd_stop_pad = emergencystop.pushed or stop4.pushed;
alg bool cmd_stop_D_gate = emergencystop.pushed or stop1.pushed;
alg bool cmd_stop_U_gate = emergencystop.pushed or stop2.pushed;
alg bool cmd_D_in_g = button14.pushed and not button10.pushed and not button17.pushed;
alg bool cmd_D_in_rg = button17.pushed and not button10.pushed;
alg bool cmd_D_in_r = button10.pushed;
alg bool cmd_D_in_rr = button18.pushed and not button10.pushed;
alg bool cmd_D_out_g = button13.pushed and not button9.pushed;
alg bool cmd_D_out_r = button9.pushed;
alg bool cmd_pad_o = button1.pushed and not button2.pushed;
alg bool cmd_pad_c = button2.pushed;
alg bool cmd_D_gate_o = button5.pushed and not button6.pushed;
alg bool cmd_D_gate_c = button6.pushed;
alg bool cmd_U_in_g = button16.pushed and not button12.pushed and not button19.pushed;
alg bool cmd_U_in_rg = button19.pushed and not button12.pushed;
alg bool cmd_U_in_r = button12.pushed;
alg bool cmd_U_in_rr = button20.pushed and not button12.pushed;
alg bool cmd_U_out_g = button15.pushed and not button11.pushed;
alg bool cmd_U_out_r = button11.pushed;
alg bool cmd_culvert_o = button3.pushed and not button4.pushed;
alg bool cmd_culvert_c = button4.pushed;
alg bool cmd_U_gate_o = button7.pushed and not button8.pushed;
alg bool cmd_U_gate_c = button8.pushed;
plant automaton button1:
  uncontrollable u_push;
  uncontrollable u_release;
  location released:
    initial;
    marked;
    edge u_push goto pushed;
  location pushed:
    edge u_release goto released;
end
plant automaton button2:
  uncontrollable u_push;
  uncontrollable u_release;
  location released:
    initial;
    marked;
    edge u_push goto pushed;
  location pushed:
    edge u_release goto released;
end
plant automaton button3:
  uncontrollable u_push;
  uncontrollable u_release;
  location released:
    initial;
    marked;
    edge u_push goto pushed;
  location pushed:
    edge u_release goto released;
end
plant automaton button4:
  uncontrollable u_push;
  uncontrollable u_release;
  location released:
    initial;
    marked;
    edge u_push goto pushed;
  location pushed:
    edge u_release goto released;
end
plant automaton button5:
  uncontrollable u_push;
  uncontrollable u_release;
  location released:
    initial;
    marked;
    edge u_push goto pushed;
  location pushed:
    edge u_release goto released;
end
plant automaton button6:
  uncontrollable u_push;
  uncontrollable u_release;
  location released:
    initial;
    marked;
    edge u_push goto pushed;
  location pushed:
    edge u_release goto released;
end
plant automaton button7:
  uncontrollable u_push;
  uncontrollable u_release;
  location released:
    initial;
    marked;
    edge u_push goto pushed;
  location pushed:
    edge u_release goto released;
end
plant automaton button8:
  uncontrollable u_push;
  uncontrollable u_release;
  location released:
    initial;
    marked;
    edge u_push goto pushed;
  location pushed:
    edge u_release goto released;
end
plant automaton button9:
  uncontrollable u_push;
  uncontrollable u_release;
  location released:
    initial;
    marked;
    edge u_push goto pushed;
  location pushed:
    edge u_release goto released;
end
plant automaton button10:
  uncontrollable u_push;
  uncontrollable u_release;
  location released:
    initial;
    marked;
    edge u_push goto pushed;
  location pushed:
    edge u_release goto released;
end
plant automaton button11:
  uncontrollable u_push;
  uncontrollable u_release;
  location released:
    initial;
    marked;
    edge u_push goto pushed;
  location pushed:
    edge u_release goto released;
end
plant automaton button12:
  uncontrollable u_push;
  uncontrollable u_release;
  location released:
    initial;
    marked;
    edge u_push goto pushed;
  location pushed:
    edge u_release goto released;
end
plant automaton button13:
  uncontrollable u_push;
  uncontrollable u_release;
  location released:
    initial;
    marked;
    edge u_push goto pushed;
  location pushed:
    edge u_release goto released;
end
plant automaton button14:
  uncontrollable u_push;
  uncontrollable u_release;
  location released:
    initial;
    marked;
    edge u_push goto pushed;
  location pushed:
    edge u_release goto released;
end
plant automaton button15:
  uncontrollable u_push;
  uncontrollable u_release;
  location released:
    initial;
    marked;
    edge u_push goto pushed;
  location pushed:
    edge u_release goto released;
end
plant automaton button16:
  uncontrollable u_push;
  uncontrollable u_release;
  location released:
    initial;
    marked;
    edge u_push goto pushed;
  location pushed:
    edge u_release goto released;
end
plant automaton button17:
  uncontrollable u_push;
  uncontrollable u_release;
  location released:
    initial;
    marked;
    edge u_push goto pushed;
  location pushed:
    edge u_release goto released;
end
plant automaton button18:
  uncontrollable u_push;
  uncontrollable u_release;
  location released:
    initial;
    marked;
    edge u_push goto pushed;
  location pushed:
    edge u_release goto released;
end
plant automaton button19:
  uncontrollable u_push;
  uncontrollable u_release;
  location released:
    initial;
    marked;
    edge u_push goto pushed;
  location pushed:
    edge u_release goto released;
end
plant automaton button20:
  uncontrollable u_push;
  uncontrollable u_release;
  location released:
    initial;
    marked;
    edge u_push goto pushed;
  location pushed:
    edge u_release goto released;
end
plant automaton emergencystop:
  uncontrollable u_push;
  uncontrollable u_release;
  location released:
    initial;
    marked;
    edge u_push goto pushed;
  location pushed:
    edge u_release goto released;
end
plant automaton stop1:
  uncontrollable u_push;
  uncontrollable u_release;
  location released:
    initial;
    marked;
    edge u_push goto pushed;
  location pushed:
    edge u_release goto released;
end
plant automaton stop2:
  uncontrollable u_push;
  uncontrollable u_release;
  location released:
    initial;
    marked;
    edge u_push goto pushed;
  location pushed:
    edge u_release goto released;
end
plant automaton stop3:
  uncontrollable u_push;
  uncontrollable u_release;
  location released:
    initial;
    marked;
    edge u_push goto pushed;
  location pushed:
    edge u_release goto released;
end
plant automaton stop4:
  uncontrollable u_push;
  uncontrollable u_release;
  location released:
    initial;
    marked;
    edge u_push goto pushed;
  location pushed:
    edge u_release goto released;
end
group pad_N:
  controllable c_open;
  controllable c_close;
  controllable c_stop;
  plant automaton A:
    location rest:
      initial;
      marked;
      edge c_open goto opening;
      edge c_close goto closing;
    location opening:
      edge c_close goto closing;
      edge c_stop goto rest;
      edge S1.u_closed_off, S1.u_open_on;
      edge S2.u_closed_off, S2.u_open_on;
      edge S3.u_closed_off, S3.u_open_on;
    location closing:
      edge c_open goto opening;
      edge c_stop goto rest;
      edge S1.u_closed_on, S1.u_open_off;
      edge S2.u_closed_on, S2.u_open_off;
      edge S3.u_closed_on, S3.u_open_off;
  end
  plant automaton S1:
    uncontrollable u_closed_on;
    uncontrollable u_closed_off;
    uncontrollable u_open_on;
    uncontrollable u_open_off;
    location closed:
      initial;
      marked;
      edge u_closed_off goto between;
    location between:
      edge u_closed_on goto closed;
      edge u_open_on goto open;
    location open:
      edge u_open_off goto between;
  end
  plant automaton S2:
    uncontrollable u_closed_on;
    uncontrollable u_closed_off;
    uncontrollable u_open_on;
    uncontrollable u_open_off;
    location closed:
      initial;
      marked;
      edge u_closed_off goto between;
    location between:
      edge u_closed_on goto closed;
      edge u_open_on goto open;
    location open:
      edge u_open_off goto between;
  end
  plant automaton S3:
    uncontrollable u_closed_on;
    uncontrollable u_closed_off;
    uncontrollable u_open_on;
    uncontrollable u_open_off;
    location closed:
      initial;
      marked;
      edge u_closed_off goto between;
    location between:
      edge u_closed_on goto closed;
      edge u_open_on goto open;
    location open:
      edge u_open_off goto between;
  end
  requirement invariant c_open needs cmd_pad_o and (not S1.open or not S2.open or not S3.open);
  requirement invariant c_close needs cmd_pad_c and (not S1.closed or not S2.closed or not S3.closed);
  requirement invariant c_stop needs cmd_stop_pad or S1.closed and S2.closed and S3.closed and A.closing or S1.open and S2.open and S3.open and A.opening;
  requirement invariant cmd_stop_pad disables c_open;
  requirement invariant cmd_stop_pad disables c_close;
end
group pad_S:
  controllable c_open;
  controllable c_close;
  controllable c_stop;
  plant automaton A:
    location rest:
      initial;
      marked;
      edge c_open goto opening;
      edge c_close goto closing;
    location opening:
      edge c_close goto closing;
      edge c_stop goto rest;
      edge S1.u_closed_off, S1.u_open_on;
      edge S2.u_closed_off, S2.u_open_on;
      edge S3.u_closed_off, S3.u_open_on;
    location closing:
      edge c_open goto opening;
      edge c_stop goto rest;
      edge S1.u_closed_on, S1.u_open_off;
      edge S2.u_closed_on, S2.u_open_off;
      edge S3.u_closed_on, S3.u_open_off;
  end
  plant automaton S1:
    uncontrollable u_closed_on;
    uncontrollable u_closed_off;
    uncontrollable u_open_on;
    uncontrollable u_open_off;
    location closed:
      initial;
      marked;
      edge u_closed_off goto between;
    location between:
      edge u_closed_on goto closed;
      edge u_open_on goto open;
    location open:
      edge u_open_off goto between;
  end
  plant automaton S2:
    uncontrollable u_closed_on;
    uncontrollable u_closed_off;
    uncontrollable u_open_on;
    uncontrollable u_open_off;
    location closed:
      initial;
      marked;
      edge u_closed_off goto between;
    location between:
      edge u_closed_on goto closed;
      edge u_open_on goto open;
    location open:
      edge u_open_off goto between;
  end
  plant automaton S3:
    uncontrollable u_closed_on;
    uncontrollable u_closed_off;
    uncontrollable u_open_on;
    uncontrollable u_open_off;
    location closed:
      initial;
      marked;
      edge u_closed_off goto between;
    location between:
      edge u_closed_on goto closed;
      edge u_open_on goto open;
    location open:
      edge u_open_off goto between;
  end
  requirement invariant c_open needs cmd_pad_o and (not S1.open or not S2.open or not S3.open);
  requirement invariant c_close needs cmd_pad_c and (not S1.closed or not S2.closed or not S3.closed);
  requirement invariant c_stop needs cmd_stop_pad or S1.closed and S2.closed and S3.closed and A.closing or S1.open and S2.open and S3.open and A.opening;
  requirement invariant cmd_stop_pad disables c_open;
  requirement invariant cmd_stop_pad disables c_close;
end
plant automaton CombinePaddles:
  location:
    initial;
    marked;
    edge pad_N.c_open, pad_S.c_open;
end
group culvert_N:
  controllable c_enable;
  controllable c_disable;
  uncontrollable u_on;
  uncontrollable u_off;
  plant automaton A:
    location closed:
      initial;
      marked;
      edge c_enable goto open;
      edge u_off;
    location open:
      edge c_disable goto closed;
      edge u_on;
  end
  plant automaton S:
    location noflow:
      initial;
      marked;
      edge u_on goto flow;
    location flow:
      edge u_off goto noflow;
  end
  requirement invariant c_enable needs cmd_culvert_o;
  requirement invariant c_disable needs cmd_culvert_c or cmd_stop_culvert;
  requirement invariant cmd_stop_culvert disables c_enable;
end
group culvert_S:
  controllable c_enable;
  controllable c_disable;
  uncontrollable u_on;
  uncontrollable u_off;
  plant automaton A:
    location closed:
      initial;
      marked;
      edge c_enable goto open;
      edge u_off;
    location open:
      edge c_disable goto closed;
      edge u_on;
  end
  plant automaton S:
    location noflow:
      initial;
      marked;
      edge u_on goto flow;
    location flow:
      edge u_off goto noflow;
  end
  requirement invariant c_enable needs cmd_culvert_o;
  requirement invariant c_disable needs cmd_culvert_c or cmd_stop_culvert;
  requirement invariant cmd_stop_culvert disables c_enable;
end
plant automaton CombineCulverts:
  location:
    initial;
    marked;
    edge culvert_N.c_enable, culvert_S.c_enable;
end
group gate_D_N:
  controllable c_high_on;
  controllable c_high_off;
  controllable c_low_on;
  controllable c_low_off;
  controllable c_open;
  controllable c_close;
  controllable c_stop;
  controllable c_fc_off;
  controllable c_fc_on;
  controllable c_sc_on;
  controllable c_sc_off;
  controllable c_fo_off;
  controllable c_fo_on;
  controllable c_so_on;
  controllable c_so_off;
  uncontrollable u_s1_on;
  uncontrollable u_s1_off;
  uncontrollable u_s2_on;
  uncontrollable u_s2_off;
  uncontrollable u_s3_on;
  uncontrollable u_s3_off;
  uncontrollable u_s4_on;
  uncontrollable u_s4_off;
  uncontrollable u_s5_on;
  uncontrollable u_s5_off;
  uncontrollable u_s6_on;
  uncontrollable u_s6_off;
  alg bool cmd_gate_o = cmd_D_gate_o;
  alg bool cmd_gate_c = cmd_D_gate_c;
  alg bool cmd_stop_gate = cmd_stop_D_gate;
  plant automaton S:
    location closed:
      initial;
      marked;
      edge u_s1_on goto bclosed;
    location bclosed:
      edge u_s1_off goto closed;
      edge u_s2_on goto fclosed;
    location fclosed:
      edge u_s2_off goto bclosed;
      edge u_s3_on goto middle;
    location middle:
      edge u_s3_off goto fclosed;
      edge u_s4_off goto fopen;
    location fopen:
      edge u_s4_on goto middle;
      edge u_s5_off goto bopen;
    location bopen:
      edge u_s5_on goto fopen;
      edge u_s6_off goto open;
    location open:
      edge u_s6_on goto bopen;
  end
  plant automaton Dir:
    location off:
      initial;
      marked;
      edge c_open goto opening;
      edge c_close goto closing;
    location opening:
      edge c_close goto closing;
      edge c_stop goto off;
      edge u_s1_on, u_s2_on, u_s3_on, u_s4_off, u_s5_off, u_s6_off;
    location closing:
      edge c_open goto opening;
      edge c_stop goto off;
      edge u_s6_on, u_s5_on, u_s4_on, u_s3_off, u_s2_off, u_s1_off;
  end
  plant automaton Spe:
    location off:
      initial;
      marked;
      edge c_fc_on goto fast_c;
      edge c_sc_on goto slow_c;
      edge c_fo_on goto fast_o;
      edge c_so_on goto slow_o;
    location fast_c:
      edge c_fc_off goto off;
    location slow_c:
      edge c_sc_off goto off;
    location fast_o:
      edge c_fo_off goto off;
    location slow_o:
      edge c_so_off goto off;
  end
  plant automaton Pre:
    location off:
      initial;
      marked;
      edge c_high_on goto high;
      edge c_low_on goto low;
    location high:
      edge c_high_off goto off;
    location low:
      edge c_low_off goto off;
  end
  plant automaton CombineActuators:
    location:
      initial;
      marked;
      edge c_open, c_fc_on, c_high_on;
  end
  requirement invariant c_open needs cmd_gate_o and not S.open and not cmd_stop_gate;
  requirement invariant c_close needs cmd_gate_c and not S.closed and not cmd_stop_gate;
  requirement invariant c_stop needs cmd_stop_gate or S.closed and Dir.closing or S.open and Dir.opening;
end
group gate_D_S:
  controllable c_high_on;
  controllable c_high_off;
  controllable c_low_on;
  controllable c_low_off;
  controllable c_open;
  controllable c_close;
  controllable c_stop;
  controllable c_fc_off;
  controllable c_fc_on;
  controllable c_sc_on;
  controllable c_sc_off;
  controllable c_fo_off;
  controllable c_fo_on;
  controllable c_so_on;
  controllable c_so_off;
  uncontrollable u_s1_on;
  uncontrollable u_s1_off;
  uncontrollable u_s2_on;
  uncontrollable u_s2_off;
  uncontrollable u_s3_on;
  uncontrollable u_s3_off;
  uncontrollable u_s4_on;
  uncontrollable u_s4_off;
  uncontrollable u_s5_on;
  uncontrollable u_s5_off;
  uncontrollable u_s6_on;
  uncontrollable u_s6_off;
  alg bool cmd_gate_o = cmd_D_gate_o;
  alg bool cmd_gate_c = cmd_D_gate_c;
  alg bool cmd_stop_gate = cmd_stop_D_gate;
  plant automaton S:
    location closed:
      initial;
      marked;
      edge u_s1_on goto bclosed;
    location bclosed:
      edge u_s1_off goto closed;
      edge u_s2_on goto fclosed;
    location fclosed:
      edge u_s2_off goto bclosed;
      edge u_s3_on goto middle;
    location middle:
      edge u_s3_off goto fclosed;
      edge u_s4_off goto fopen;
    location fopen:
      edge u_s4_on goto middle;
      edge u_s5_off goto bopen;
    location bopen:
      edge u_s5_on goto fopen;
      edge u_s6_off goto open;
    location open:
      edge u_s6_on goto bopen;
  end
  plant automaton Dir:
    location off:
      initial;
      marked;
      edge c_open goto opening;
      edge c_close goto closing;
    location opening:
      edge c_close goto closing;
      edge c_stop goto off;
      edge u_s1_on, u_s2_on, u_s3_on, u_s4_off, u_s5_off, u_s6_off;
    location closing:
      edge c_open goto opening;
      edge c_stop goto off;
      edge u_s6_on, u_s5_on, u_s4_on, u_s3_off, u_s2_off, u_s1_off;
  end
  plant automaton Spe:
    location off:
      initial;
      marked;
      edge c_fc_on goto fast_c;
      edge c_sc_on goto slow_c;
      edge c_fo_on goto fast_o;
      edge c_so_on goto slow_o;
    location fast_c:
      edge c_fc_off goto off;
    location slow_c:
      edge c_sc_off goto off;
    location fast_o:
      edge c_fo_off goto off;
    location slow_o:
      edge c_so_off goto off;
  end
  plant automaton Pre:
    location off:
      initial;
      marked;
      edge c_high_on goto high;
      edge c_low_on goto low;
    location high:
      edge c_high_off goto off;
    location low:
      edge c_low_off goto off;
  end
  plant automaton CombineActuators:
    location:
      initial;
      marked;
      edge c_open, c_fc_on, c_high_on;
  end
  requirement invariant c_open needs cmd_gate_o and not S.open and not cmd_stop_gate;
  requirement invariant c_close needs cmd_gate_c and not S.closed and not cmd_stop_gate;
  requirement invariant c_stop needs cmd_stop_gate or S.closed and Dir.closing or S.open and Dir.opening;
end
group gate_U_N:
  controllable c_high_on;
  controllable c_high_off;
  controllable c_low_on;
  controllable c_low_off;
  controllable c_open;
  controllable c_close;
  controllable c_stop;
  controllable c_fc_off;
  controllable c_fc_on;
  controllable c_sc_on;
  controllable c_sc_off;
  controllable c_fo_off;
  controllable c_fo_on;
  controllable c_so_on;
  controllable c_so_off;
  uncontrollable u_s1_on;
  uncontrollable u_s1_off;
  uncontrollable u_s2_on;
  uncontrollable u_s2_off;
  uncontrollable u_s3_on;
  uncontrollable u_s3_off;
  uncontrollable u_s4_on;
  uncontrollable u_s4_off;
  uncontrollable u_s5_on;
  uncontrollable u_s5_off;
  uncontrollable u_s6_on;
  uncontrollable u_s6_off;
  alg bool cmd_gate_o = cmd_U_gate_o;
  alg bool cmd_gate_c = cmd_U_gate_c;
  alg bool cmd_stop_gate = cmd_stop_U_gate;
  plant automaton S:
    location closed:
      initial;
      marked;
      edge u_s1_on goto bclosed;
    location bclosed:
      edge u_s1_off goto closed;
      edge u_s2_on goto fclosed;
    location fclosed:
      edge u_s2_off goto bclosed;
      edge u_s3_on goto middle;
    location middle:
      edge u_s3_off goto fclosed;
      edge u_s4_off goto fopen;
    location fopen:
      edge u_s4_on goto middle;
      edge u_s5_off goto bopen;
    location bopen:
      edge u_s5_on goto fopen;
      edge u_s6_off goto open;
    location open:
      edge u_s6_on goto bopen;
  end
  plant automaton Dir:
    location off:
      initial;
      marked;
      edge c_open goto opening;
      edge c_close goto closing;
    location opening:
      edge c_close goto closing;
      edge c_stop goto off;
      edge u_s1_on, u_s2_on, u_s3_on, u_s4_off, u_s5_off, u_s6_off;
    location closing:
      edge c_open goto opening;
      edge c_stop goto off;
      edge u_s6_on, u_s5_on, u_s4_on, u_s3_off, u_s2_off, u_s1_off;
  end
  plant automaton Spe:
    location off:
      initial;
      marked;
      edge c_fc_on goto fast_c;
      edge c_sc_on goto slow_c;
      edge c_fo_on goto fast_o;
      edge c_so_on goto slow_o;
    location fast_c:
      edge c_fc_off goto off;
    location slow_c:
      edge c_sc_off goto off;
    location fast_o:
      edge c_fo_off goto off;
    location slow_o:
      edge c_so_off goto off;
  end
  plant automaton Pre:
    location off:
      initial;
      marked;
      edge c_high_on goto high;
      edge c_low_on goto low;
    location high:
      edge c_high_off goto off;
    location low:
      edge c_low_off goto off;
  end
  plant automaton CombineActuators:
    location:
      initial;
      marked;
      edge c_open, c_fc_on, c_high_on;
  end
  requirement invariant c_open needs cmd_gate_o and not S.open and not cmd_stop_gate;
  requirement invariant c_close needs cmd_gate_c and not S.closed and not cmd_stop_gate;
  requirement invariant c_stop needs cmd_stop_gate or S.closed and Dir.closing or S.open and Dir.opening;
end
group gate_U_S:
  controllable c_high_on;
  controllable c_high_off;
  controllable c_low_on;
  controllable c_low_off;
  controllable c_open;
  controllable c_close;
  controllable c_stop;
  controllable c_fc_off;
  controllable c_fc_on;
  controllable c_sc_on;
  controllable c_sc_off;
  controllable c_fo_off;
  controllable c_fo_on;
  controllable c_so_on;
  controllable c_so_off;
  uncontrollable u_s1_on;
  uncontrollable u_s1_off;
  uncontrollable u_s2_on;
  uncontrollable u_s2_off;
  uncontrollable u_s3_on;
  uncontrollable u_s3_off;
  uncontrollable u_s4_on;
  uncontrollable u_s4_off;
  uncontrollable u_s5_on;
  uncontrollable u_s5_off;
  uncontrollable u_s6_on;
  uncontrollable u_s6_off;
  alg bool cmd_gate_o = cmd_U_gate_o;
  alg bool cmd_gate_c = cmd_U_gate_c;
  alg bool cmd_stop_gate = cmd_stop_U_gate;
  plant automaton S:
    location closed:
      initial;
      marked;
      edge u_s1_on goto bclosed;
    location bclosed:
      edge u_s1_off goto closed;
      edge u_s2_on goto fclosed;
    location fclosed:
      edge u_s2_off goto bclosed;
      edge u_s3_on goto middle;
    location middle:
      edge u_s3_off goto fclosed;
      edge u_s4_off goto fopen;
    location fopen:
      edge u_s4_on goto middle;
      edge u_s5_off goto bopen;
    location bopen:
      edge u_s5_on goto fopen;
      edge u_s6_off goto open;
    location open:
      edge u_s6_on goto bopen;
  end
  plant automaton Dir:
    location off:
      initial;
      marked;
      edge c_open goto opening;
      edge c_close goto closing;
    location opening:
      edge c_close goto closing;
      edge c_stop goto off;
      edge u_s1_on, u_s2_on, u_s3_on, u_s4_off, u_s5_off, u_s6_off;
    location closing:
      edge c_open goto opening;
      edge c_stop goto off;
      edge u_s6_on, u_s5_on, u_s4_on, u_s3_off, u_s2_off, u_s1_off;
  end
  plant automaton Spe:
    location off:
      initial;
      marked;
      edge c_fc_on goto fast_c;
      edge c_sc_on goto slow_c;
      edge c_fo_on goto fast_o;
      edge c_so_on goto slow_o;
    location fast_c:
      edge c_fc_off goto off;
    location slow_c:
      edge c_sc_off goto off;
    location fast_o:
      edge c_fo_off goto off;
    location slow_o:
      edge c_so_off goto off;
  end
  plant automaton Pre:
    location off:
      initial;
      marked;
      edge c_high_on goto high;
      edge c_low_on goto low;
    location high:
      edge c_high_off goto off;
    location low:
      edge c_low_off goto off;
  end
  plant automaton CombineActuators:
    location:
      initial;
      marked;
      edge c_open, c_fc_on, c_high_on;
  end
  requirement invariant c_open needs cmd_gate_o and not S.open and not cmd_stop_gate;
  requirement invariant c_close needs cmd_gate_c and not S.closed and not cmd_stop_gate;
  requirement invariant c_stop needs cmd_stop_gate or S.closed and Dir.closing or S.open and Dir.opening;
end
plant automaton CombineGatesUp:
  location:
    initial;
    marked;
    edge gate_U_N.c_open, gate_U_S.c_open;
end
plant automaton CombineGatesDown:
  location:
    initial;
    marked;
    edge gate_D_N.c_open, gate_D_S.c_open;
end
plant automaton s_equal_D:
  uncontrollable u_equal_on;
  uncontrollable u_equal_off;
  location off:
    marked;
    edge u_equal_on goto on;
  location on:
    initial;
    marked;
    edge u_equal_off goto off;
end
plant automaton s_equal_U:
  uncontrollable u_equal_on;
  uncontrollable u_equal_off;
  location off:
    initial;
    marked;
    edge u_equal_on goto on;
  location on:
    marked;
    edge u_equal_off goto off;
end
group out_D_N:
  controllable c_red;
  controllable c_green;
  uncontrollable u_r_on;
  uncontrollable u_r_off;
  uncontrollable u_g_on;
  uncontrollable u_g_off;
  alg bool cmd_out_r = cmd_D_out_r;
  alg bool cmd_out_g = cmd_D_out_g;
  plant automaton S:
    location off:
      edge u_r_on goto red;
      edge u_g_on goto green;
    location red:
      initial;
      marked;
      edge u_r_off goto off;
      edge u_g_on goto redgreen;
    location green:
      edge u_r_on goto redgreen;
      edge u_g_off goto off;
    location redgreen:
      edge u_r_off goto green;
      edge u_g_off goto red;
  end
  plant automaton A:
    location red:
      initial;
      marked;
      edge c_green goto green;
      edge u_r_on, u_g_off;
    location green:
      edge c_red goto red;
      edge u_g_on, u_r_off;
  end
  requirement invariant c_red needs cmd_out_r or cmd_stop;
  requirement invariant c_green needs cmd_out_g and not cmd_stop;
end
group out_D_S:
  controllable c_red;
  controllable c_green;
  uncontrollable u_r_on;
  uncontrollable u_r_off;
  uncontrollable u_g_on;
  uncontrollable u_g_off;
  alg bool cmd_out_r = cmd_D_out_r;
  alg bool cmd_out_g = cmd_D_out_g;
  plant automaton S:
    location off:
      edge u_r_on goto red;
      edge u_g_on goto green;
    location red:
      initial;
      marked;
      edge u_r_off goto off;
      edge u_g_on goto redgreen;
    location green:
      edge u_r_on goto redgreen;
      edge u_g_off goto off;
    location redgreen:
      edge u_r_off goto green;
      edge u_g_off goto red;
  end
  plant automaton A:
    location red:
      initial;
      marked;
      edge c_green goto green;
      edge u_r_on, u_g_off;
    location green:
      edge c_red goto red;
      edge u_g_on, u_r_off;
  end
  requirement invariant c_red needs cmd_out_r or cmd_stop;
  requirement invariant c_green needs cmd_out_g and not cmd_stop;
end
group out_U_N:
  controllable c_red;
  controllable c_green;
  uncontrollable u_r_on;
  uncontrollable u_r_off;
  uncontrollable u_g_on;
  uncontrollable u_g_off;
  alg bool cmd_out_r = cmd_U_out_r;
  alg bool cmd_out_g = cmd_U_out_g;
  plant automaton S:
    location off:
      edge u_r_on goto red;
      edge u_g_on goto green;
    location red:
      initial;
      marked;
      edge u_r_off goto off;
      edge u_g_on goto redgreen;
    location green:
      edge u_r_on goto redgreen;
      edge u_g_off goto off;
    location redgreen:
      edge u_r_off goto green;
      edge u_g_off goto red;
  end
  plant automaton A:
    location red:
      initial;
      marked;
      edge c_green goto green;
      edge u_r_on, u_g_off;
    location green:
      edge c_red goto red;
      edge u_g_on, u_r_off;
  end
  requirement invariant c_red needs cmd_out_r or cmd_stop;
  requirement invariant c_green needs cmd_out_g and not cmd_stop;
end
group out_U_S:
  controllable c_red;
  controllable c_green;
  uncontrollable u_r_on;
  uncontrollable u_r_off;
  uncontrollable u_g_on;
  uncontrollable u_g_off;
  alg bool cmd_out_r = cmd_U_out_r;
  alg bool cmd_out_g = cmd_U_out_g;
  plant automaton S:
    location off:
      edge u_r_on goto red;
      edge u_g_on goto green;
    location red:
      initial;
      marked;
      edge u_r_off goto off;
      edge u_g_on goto redgreen;
    location green:
      edge u_r_on goto redgreen;
      edge u_g_off goto off;
    location redgreen:
      edge u_r_off goto green;
      edge u_g_off goto red;
  end
  plant automaton A:
    location red:
      initial;
      marked;
      edge c_green goto green;
      edge u_r_on, u_g_off;
    location green:
      edge c_red goto red;
      edge u_g_on, u_r_off;
  end
  requirement invariant c_red needs cmd_out_r or cmd_stop;
  requirement invariant c_green needs cmd_out_g and not cmd_stop;
end
plant automaton CombineOutDown:
  location:
    initial;
    marked;
    edge out_D_N.c_red, out_D_S.c_red;
end
plant automaton CombineOutUp:
  location:
    initial;
    marked;
    edge out_U_N.c_red, out_U_S.c_red;
end
group in_D_N:
  controllable c_red;
  controllable c_green;
  controllable c_redgreen;
  controllable c_redred;
  uncontrollable u_r_on;
  uncontrollable u_r_off;
  uncontrollable u_g_on;
  uncontrollable u_g_off;
  uncontrollable u_s_on;
  uncontrollable u_s_off;
  alg bool cmd_in_red = cmd_D_in_r;
  alg bool cmd_in_green = cmd_D_in_g;
  alg bool cmd_in_rg = cmd_D_in_rg;
  alg bool cmd_in_redred = cmd_D_in_rr;
  plant automaton S:
    location off:
      edge u_r_on goto red;
      edge u_g_on goto green;
      edge u_s_on goto lowred;
    location red:
      initial;
      marked;
      edge u_r_off goto off;
      edge u_g_on goto redgreen;
      edge u_s_on goto redred;
    location green:
      edge u_r_on goto redgreen;
      edge u_g_off goto off;
      edge u_s_on goto greenred;
    location lowred:
      edge u_r_on goto redred;
      edge u_g_on goto greenred;
      edge u_s_off goto off;
    location redgreen:
      edge u_r_off goto green;
      edge u_g_off goto red;
      edge u_s_on goto redgreenred;
    location redred:
      edge u_r_off goto lowred;
      edge u_g_on goto redgreenred;
      edge u_s_off goto red;
    location greenred:
      edge u_r_on goto redgreenred;
      edge u_g_off goto lowred;
      edge u_s_off goto green;
    location redgreenred:
      edge u_r_off goto greenred;
      edge u_g_off goto redred;
      edge u_s_off goto redgreen;
  end
  plant automaton A:
    location red:
      initial;
      marked;
      edge c_redgreen goto redgreen;
      edge c_redred goto redred;
      edge u_r_on, u_g_off, u_s_off;
    location green:
      edge c_red goto red;
      edge c_redgreen goto redgreen;
      edge u_r_off, u_g_on, u_s_off;
    location redred:
      edge c_red goto red;
      edge u_r_on, u_g_off, u_s_on;
    location redgreen:
      edge c_green goto green;
      edge c_red goto red;
      edge u_r_on, u_g_on, u_s_off;
  end
  requirement invariant c_red needs cmd_in_red or cmd_stop;
  requirement invariant c_green needs cmd_in_green and not cmd_stop;
  requirement invariant c_redgreen needs cmd_in_rg and not cmd_stop;
  requirement invariant c_redred needs cmd_in_redred and not cmd_stop;
end
group in_D_S:
  controllable c_red;
  controllable c_green;
  controllable c_redgreen;
  controllable c_redred;
  uncontrollable u_r_on;
  uncontrollable u_r_off;
  uncontrollable u_g_on;
  uncontrollable u_g_off;
  uncontrollable u_s_on;
  uncontrollable u_s_off;
  alg bool cmd_in_red = cmd_D_in_r;
  alg bool cmd_in_green = cmd_D_in_g;
  alg bool cmd_in_rg = cmd_D_in_rg;
  alg bool cmd_in_redred = cmd_D_in_rr;
  plant automaton S:
    location off:
      edge u_r_on goto red;
      edge u_g_on goto green;
      edge u_s_on goto lowred;
    location red:
      initial;
      marked;
      edge u_r_off goto off;
      edge u_g_on goto redgreen;
      edge u_s_on goto redred;
    location green:
      edge u_r_on goto redgreen;
      edge u_g_off goto off;
      edge u_s_on goto greenred;
    location lowred:
      edge u_r_on goto redred;
      edge u_g_on goto greenred;
      edge u_s_off goto off;
    location redgreen:
      edge u_r_off goto green;
      edge u_g_off goto red;
      edge u_s_on goto redgreenred;
    location redred:
      edge u_r_off goto lowred;
      edge u_g_on goto redgreenred;
      edge u_s_off goto red;
    location greenred:
      edge u_r_on goto redgreenred;
      edge u_g_off goto lowred;
      edge u_s_off goto green;
    location redgreenred:
      edge u_r_off goto greenred;
      edge u_g_off goto redred;
      edge u_s_off goto redgreen;
  end
  plant automaton A:
    location red:
      initial;
      marked;
      edge c_redgreen goto redgreen;
      edge c_redred goto redred;
      edge u_r_on, u_g_off, u_s_off;
    location green:
      edge c_red goto red;
      edge c_redgreen goto redgreen;
      edge u_r_off, u_g_on, u_s_off;
    location redred:
      edge c_red goto red;
      edge u_r_on, u_g_off, u_s_on;
    location redgreen:
      edge c_green goto green;
      edge c_red goto red;
      edge u_r_on, u_g_on, u_s_off;
  end
  requirement invariant c_red needs cmd_in_red or cmd_stop;
  requirement invariant c_green needs cmd_in_green and not cmd_stop;
  requirement invariant c_redgreen needs cmd_in_rg and not cmd_stop;
  requirement invariant c_redred needs cmd_in_redred and not cmd_stop;
end
group in_U_N:
  controllable c_red;
  controllable c_green;
  controllable c_redgreen;
  controllable c_redred;
  uncontrollable u_r_on;
  uncontrollable u_r_off;
  uncontrollable u_g_on;
  uncontrollable u_g_off;
  uncontrollable u_s_on;
  uncontrollable u_s_off;
  alg bool cmd_in_red = cmd_U_in_r;
  alg bool cmd_in_green = cmd_U_in_g;
  alg bool cmd_in_rg = cmd_U_in_rg;
  alg bool cmd_in_redred = cmd_U_in_rr;
  plant automaton S:
    location off:
      edge u_r_on goto red;
      edge u_g_on goto green;
      edge u_s_on goto lowred;
    location red:
      initial;
      marked;
      edge u_r_off goto off;
      edge u_g_on goto redgreen;
      edge u_s_on goto redred;
    location green:
      edge u_r_on goto redgreen;
      edge u_g_off goto off;
      edge u_s_on goto greenred;
    location lowred:
      edge u_r_on goto redred;
      edge u_g_on goto greenred;
      edge u_s_off goto off;
    location redgreen:
      edge u_r_off goto green;
      edge u_g_off goto red;
      edge u_s_on goto redgreenred;
    location redred:
      edge u_r_off goto lowred;
      edge u_g_on goto redgreenred;
      edge u_s_off goto red;
    location greenred:
      edge u_r_on goto redgreenred;
      edge u_g_off goto lowred;
      edge u_s_off goto green;
    location redgreenred:
      edge u_r_off goto greenred;
      edge u_g_off goto redred;
      edge u_s_off goto redgreen;
  end
  plant automaton A:
    location red:
      initial;
      marked;
      edge c_redgreen goto redgreen;
      edge c_redred goto redred;
      edge u_r_on, u_g_off, u_s_off;
    location green:
      edge c_red goto red;
      edge c_redgreen goto redgreen;
      edge u_r_off, u_g_on, u_s_off;
    location redred:
      edge c_red goto red;
      edge u_r_on, u_g_off, u_s_on;
    location redgreen:
      edge c_green goto green;
      edge c_red goto red;
      edge u_r_on, u_g_on, u_s_off;
  end
  requirement invariant c_red needs cmd_in_red or cmd_stop;
  requirement invariant c_green needs cmd_in_green and not cmd_stop;
  requirement invariant c_redgreen needs cmd_in_rg and not cmd_stop;
  requirement invariant c_redred needs cmd_in_redred and not cmd_stop;
end
group in_U_S:
  controllable c_red;
  controllable c_green;
  controllable c_redgreen;
  controllable c_redred;
  uncontrollable u_r_on;
  uncontrollable u_r_off;
  uncontrollable u_g_on;
  uncontrollable u_g_off;
  uncontrollable u_s_on;
  uncontrollable u_s_off;
  alg bool cmd_in_red = cmd_U_in_r;
  alg bool cmd_in_green = cmd_U_in_g;
  alg bool cmd_in_rg = cmd_U_in_rg;
  alg bool cmd_in_redred = cmd_U_in_rr;
  plant automaton S:
    location off:
      edge u_r_on goto red;
      edge u_g_on goto green;
      edge u_s_on goto lowred;
    location red:
      initial;
      marked;
      edge u_r_off goto off;
      edge u_g_on goto redgreen;
      edge u_s_on goto redred;
    location green:
      edge u_r_on goto redgreen;
      edge u_g_off goto off;
      edge u_s_on goto greenred;
    location lowred:
      edge u_r_on goto redred;
      edge u_g_on goto greenred;
      edge u_s_off goto off;
    location redgreen:
      edge u_r_off goto green;
      edge u_g_off goto red;
      edge u_s_on goto redgreenred;
    location redred:
      edge u_r_off goto lowred;
      edge u_g_on goto redgreenred;
      edge u_s_off goto red;
    location greenred:
      edge u_r_on goto redgreenred;
      edge u_g_off goto lowred;
      edge u_s_off goto green;
    location redgreenred:
      edge u_r_off goto greenred;
      edge u_g_off goto redred;
      edge u_s_off goto redgreen;
  end
  plant automaton A:
    location red:
      initial;
      marked;
      edge c_redgreen goto redgreen;
      edge c_redred goto redred;
      edge u_r_on, u_g_off, u_s_off;
    location green:
      edge c_red goto red;
      edge c_redgreen goto redgreen;
      edge u_r_off, u_g_on, u_s_off;
    location redred:
      edge c_red goto red;
      edge u_r_on, u_g_off, u_s_on;
    location redgreen:
      edge c_green goto green;
      edge c_red goto red;
      edge u_r_on, u_g_on, u_s_off;
  end
  requirement invariant c_red needs cmd_in_red or cmd_stop;
  requirement invariant c_green needs cmd_in_green and not cmd_stop;
  requirement invariant c_redgreen needs cmd_in_rg and not cmd_stop;
  requirement invariant c_redred needs cmd_in_redred and not cmd_stop;
end
plant automaton CombineInDown:
  location:
    initial;
    marked;
    edge in_D_N.c_red, in_D_S.c_red;
end
plant automaton CombineInUp:
  location:
    initial;
    marked;
    edge in_U_N.c_red, in_U_S.c_red;
end
group req_gate_D_S:
  alg bool s_closed = gate_D_S.S.closed;
  alg bool s_bclosed = gate_D_S.S.bclosed;
  alg bool s_frclosed = gate_D_S.S.fclosed;
  alg bool s_middle = gate_D_S.S.middle;
  alg bool s_fropen = gate_D_S.S.fopen;
  alg bool s_bopen = gate_D_S.S.bopen;
  alg bool s_open = gate_D_S.S.open;
  alg bool closing = gate_D_S.Dir.closing;
  alg bool opening = gate_D_S.Dir.opening;
  requirement invariant gate_D_S.c_fc_on needs not(s_bclosed or s_closed) and closing;
  requirement invariant gate_D_S.c_fc_off needs s_bclosed or s_closed;
  requirement invariant gate_D_S.c_sc_on needs s_bclosed and closing;
  requirement invariant gate_D_S.c_sc_off needs not s_bclosed;
  requirement invariant gate_D_S.c_fo_on needs not(s_bopen or s_open) and opening;
  requirement invariant gate_D_S.c_fo_off needs s_bopen or s_open;
  requirement invariant gate_D_S.c_so_on needs s_bopen and opening;
  requirement invariant gate_D_S.c_so_off needs not s_bopen;
  requirement invariant gate_D_S.c_high_on needs (s_open or s_bopen or s_fropen or s_middle) and closing or (s_closed or s_bclosed or s_frclosed or s_middle) and opening;
  requirement invariant gate_D_S.c_high_off needs not((s_open or s_bopen or s_fropen or s_middle) and closing or (s_closed or s_bclosed or s_frclosed or s_middle) and opening);
  requirement invariant gate_D_S.c_low_on needs (s_frclosed or s_bclosed) and closing or (s_fropen or s_bopen) and opening;
  requirement invariant gate_D_S.c_low_off needs not((s_frclosed or s_bclosed) and closing or (s_fropen or s_bopen) and opening);
end
group req_gate_D_N:
  alg bool s_closed = gate_D_N.S.closed;
  alg bool s_bclosed = gate_D_N.S.bclosed;
  alg bool s_frclosed = gate_D_N.S.fclosed;
  alg bool s_middle = gate_D_N.S.middle;
  alg bool s_fropen = gate_D_N.S.fopen;
  alg bool s_bopen = gate_D_N.S.bopen;
  alg bool s_open = gate_D_N.S.open;
  alg bool closing = gate_D_N.Dir.closing;
  alg bool opening = gate_D_N.Dir.opening;
  requirement invariant gate_D_N.c_fc_on needs not(s_bclosed or s_closed) and closing;
  requirement invariant gate_D_N.c_fc_off needs s_bclosed or s_closed;
  requirement invariant gate_D_N.c_sc_on needs s_bclosed and closing;
  requirement invariant gate_D_N.c_sc_off needs not s_bclosed;
  requirement invariant gate_D_N.c_fo_on needs not(s_bopen or s_open) and opening;
  requirement invariant gate_D_N.c_fo_off needs s_bopen or s_open;
  requirement invariant gate_D_N.c_so_on needs s_bopen and opening;
  requirement invariant gate_D_N.c_so_off needs not s_bopen;
  requirement invariant gate_D_N.c_high_on needs (s_open or s_bopen or s_fropen or s_middle) and closing or (s_closed or s_bclosed or s_frclosed or s_middle) and opening;
  requirement invariant gate_D_N.c_high_off needs not((s_open or s_bopen or s_fropen or s_middle) and closing or (s_closed or s_bclosed or s_frclosed or s_middle) and opening);
  requirement invariant gate_D_N.c_low_on needs (s_frclosed or s_bclosed) and closing or (s_fropen or s_bopen) and opening;
  requirement invariant gate_D_N.c_low_off needs not((s_frclosed or s_bclosed) and closing or (s_fropen or s_bopen) and opening);
end
group req_gate_U_S:
  alg bool s_closed = gate_U_S.S.closed;
  alg bool s_bclosed = gate_U_S.S.bclosed;
  alg bool s_frclosed = gate_U_S.S.fclosed;
  alg bool s_middle = gate_U_S.S.middle;
  alg bool s_fropen = gate_U_S.S.fopen;
  alg bool s_bopen = gate_U_S.S.bopen;
  alg bool s_open = gate_U_S.S.open;
  alg bool closing = gate_U_S.Dir.closing;
  alg bool opening = gate_U_S.Dir.opening;
  requirement invariant gate_U_S.c_fc_on needs not(s_bclosed or s_closed) and closing;
  requirement invariant gate_U_S.c_fc_off needs s_bclosed or s_closed;
  requirement invariant gate_U_S.c_sc_on needs s_bclosed and closing;
  requirement invariant gate_U_S.c_sc_off needs not s_bclosed;
  requirement invariant gate_U_S.c_fo_on needs not(s_bopen or s_open) and opening;
  requirement invariant gate_U_S.c_fo_off needs s_bopen or s_open;
  requirement invariant gate_U_S.c_so_on needs s_bopen and opening;
  requirement invariant gate_U_S.c_so_off needs not s_bopen;
  requirement invariant gate_U_S.c_high_on needs (s_open or s_bopen or s_fropen or s_middle) and closing or (s_closed or s_bclosed or s_frclosed or s_middle) and opening;
  requirement invariant gate_U_S.c_high_off needs not((s_open or s_bopen or s_fropen or s_middle) and closing or (s_closed or s_bclosed or s_frclosed or s_middle) and opening);
  requirement invariant gate_U_S.c_low_on needs (s_frclosed or s_bclosed) and closing or (s_fropen or s_bopen) and opening;
  requirement invariant gate_U_S.c_low_off needs not((s_frclosed or s_bclosed) and closing or (s_fropen or s_bopen) and opening);
end
group req_gate_U_N:
  alg bool s_closed = gate_U_N.S.closed;
  alg bool s_bclosed = gate_U_N.S.bclosed;
  alg bool s_frclosed = gate_U_N.S.fclosed;
  alg bool s_middle = gate_U_N.S.middle;
  alg bool s_fropen = gate_U_N.S.fopen;
  alg bool s_bopen = gate_U_N.S.bopen;
  alg bool s_open = gate_U_N.S.open;
  alg bool closing = gate_U_N.Dir.closing;
  alg bool opening = gate_U_N.Dir.opening;
  requirement invariant gate_U_N.c_fc_on needs not(s_bclosed or s_closed) and closing;
  requirement invariant gate_U_N.c_fc_off needs s_bclosed or s_closed;
  requirement invariant gate_U_N.c_sc_on needs s_bclosed and closing;
  requirement invariant gate_U_N.c_sc_off needs not s_bclosed;
  requirement invariant gate_U_N.c_fo_on needs not(s_bopen or s_open) and opening;
  requirement invariant gate_U_N.c_fo_off needs s_bopen or s_open;
  requirement invariant gate_U_N.c_so_on needs s_bopen and opening;
  requirement invariant gate_U_N.c_so_off needs not s_bopen;
  requirement invariant gate_U_N.c_high_on needs (s_open or s_bopen or s_fropen or s_middle) and closing or (s_closed or s_bclosed or s_frclosed or s_middle) and opening;
  requirement invariant gate_U_N.c_high_off needs not((s_open or s_bopen or s_fropen or s_middle) and closing or (s_closed or s_bclosed or s_frclosed or s_middle) and opening);
  requirement invariant gate_U_N.c_low_on needs (s_frclosed or s_bclosed) and closing or (s_fropen or s_bopen) and opening;
  requirement invariant gate_U_N.c_low_off needs not((s_frclosed or s_bclosed) and closing or (s_fropen or s_bopen) and opening);
end
supervisor automaton sup:
  alphabet pad_N.c_open, pad_N.c_close, pad_N.c_stop, pad_S.c_open, pad_S.c_close, pad_S.c_stop, culvert_N.c_enable, culvert_N.c_disable, culvert_S.c_enable, culvert_S.c_disable, gate_D_N.c_open, gate_D_N.c_close, gate_D_N.c_stop, gate_D_N.c_fc_on, gate_D_N.c_sc_on, gate_D_N.c_fo_on, gate_D_N.c_so_on, gate_D_N.c_fc_off, gate_D_N.c_sc_off, gate_D_N.c_fo_off, gate_D_N.c_so_off, gate_D_N.c_high_on, gate_D_N.c_low_on, gate_D_N.c_high_off, gate_D_N.c_low_off, gate_D_S.c_open, gate_D_S.c_close, gate_D_S.c_stop, gate_D_S.c_fc_on, gate_D_S.c_sc_on, gate_D_S.c_fo_on, gate_D_S.c_so_on, gate_D_S.c_fc_off, gate_D_S.c_sc_off, gate_D_S.c_fo_off, gate_D_S.c_so_off, gate_D_S.c_high_on, gate_D_S.c_low_on, gate_D_S.c_high_off, gate_D_S.c_low_off, gate_U_N.c_open, gate_U_N.c_close, gate_U_N.c_stop, gate_U_N.c_fc_on, gate_U_N.c_sc_on, gate_U_N.c_fo_on, gate_U_N.c_so_on, gate_U_N.c_fc_off, gate_U_N.c_sc_off, gate_U_N.c_fo_off, gate_U_N.c_so_off, gate_U_N.c_high_on, gate_U_N.c_low_on, gate_U_N.c_high_off, gate_U_N.c_low_off, gate_U_S.c_open, gate_U_S.c_close, gate_U_S.c_stop, gate_U_S.c_fc_on, gate_U_S.c_sc_on, gate_U_S.c_fo_on, gate_U_S.c_so_on, gate_U_S.c_fc_off, gate_U_S.c_sc_off, gate_U_S.c_fo_off, gate_U_S.c_so_off, gate_U_S.c_high_on, gate_U_S.c_low_on, gate_U_S.c_high_off, gate_U_S.c_low_off, out_D_N.c_green, out_D_N.c_red, out_D_S.c_green, out_D_S.c_red, out_U_N.c_green, out_U_N.c_red, out_U_S.c_green, out_U_S.c_red, in_D_N.c_redgreen, in_D_N.c_redred, in_D_N.c_red, in_D_N.c_green, in_D_S.c_redgreen, in_D_S.c_redred, in_D_S.c_red, in_D_S.c_green, in_U_N.c_redgreen, in_U_N.c_redred, in_U_N.c_red, in_U_N.c_green, in_U_S.c_redgreen, in_U_S.c_redred, in_U_S.c_red, in_U_S.c_green;
  location:
    initial;
    marked;
    edge culvert_N.c_disable when true;
    edge culvert_N.c_enable when true;
    edge culvert_S.c_disable when true;
    edge culvert_S.c_enable when true;
    edge gate_D_N.c_close when true;
    edge gate_D_N.c_fc_off when true;
    edge gate_D_N.c_fc_on when true;
    edge gate_D_N.c_fo_off when true;
    edge gate_D_N.c_fo_on when true;
    edge gate_D_N.c_high_off when true;
    edge gate_D_N.c_high_on when true;
    edge gate_D_N.c_low_off when true;
    edge gate_D_N.c_low_on when true;
    edge gate_D_N.c_open when true;
    edge gate_D_N.c_sc_off when true;
    edge gate_D_N.c_sc_on when true;
    edge gate_D_N.c_so_off when true;
    edge gate_D_N.c_so_on when true;
    edge gate_D_N.c_stop when true;
    edge gate_D_S.c_close when true;
    edge gate_D_S.c_fc_off when true;
    edge gate_D_S.c_fc_on when true;
    edge gate_D_S.c_fo_off when true;
    edge gate_D_S.c_fo_on when true;
    edge gate_D_S.c_high_off when true;
    edge gate_D_S.c_high_on when true;
    edge gate_D_S.c_low_off when true;
    edge gate_D_S.c_low_on when true;
    edge gate_D_S.c_open when true;
    edge gate_D_S.c_sc_off when true;
    edge gate_D_S.c_sc_on when true;
    edge gate_D_S.c_so_off when true;
    edge gate_D_S.c_so_on when true;
    edge gate_D_S.c_stop when true;
    edge gate_U_N.c_close when true;
    edge gate_U_N.c_fc_off when true;
    edge gate_U_N.c_fc_on when true;
    edge gate_U_N.c_fo_off when true;
    edge gate_U_N.c_fo_on when true;
    edge gate_U_N.c_high_off when true;
    edge gate_U_N.c_high_on when true;
    edge gate_U_N.c_low_off when true;
    edge gate_U_N.c_low_on when true;
    edge gate_U_N.c_open when true;
    edge gate_U_N.c_sc_off when true;
    edge gate_U_N.c_sc_on when true;
    edge gate_U_N.c_so_off when true;
    edge gate_U_N.c_so_on when true;
    edge gate_U_N.c_stop when true;
    edge gate_U_S.c_close when true;
    edge gate_U_S.c_fc_off when true;
    edge gate_U_S.c_fc_on when true;
    edge gate_U_S.c_fo_off when true;
    edge gate_U_S.c_fo_on when true;
    edge gate_U_S.c_high_off when true;
    edge gate_U_S.c_high_on when true;
    edge gate_U_S.c_low_off when true;
    edge gate_U_S.c_low_on when true;
    edge gate_U_S.c_open when true;
    edge gate_U_S.c_sc_off when true;
    edge gate_U_S.c_sc_on when true;
    edge gate_U_S.c_so_off when true;
    edge gate_U_S.c_so_on when true;
    edge gate_U_S.c_stop when true;
    edge in_D_N.c_green when true;
    edge in_D_N.c_red when true;
    edge in_D_N.c_redgreen when true;
    edge in_D_N.c_redred when true;
    edge in_D_S.c_green when true;
    edge in_D_S.c_red when true;
    edge in_D_S.c_redgreen when true;
    edge in_D_S.c_redred when true;
    edge in_U_N.c_green when true;
    edge in_U_N.c_red when true;
    edge in_U_N.c_redgreen when true;
    edge in_U_N.c_redred when true;
    edge in_U_S.c_green when true;
    edge in_U_S.c_red when true;
    edge in_U_S.c_redgreen when true;
    edge in_U_S.c_redred when true;
    edge out_D_N.c_green when true;
    edge out_D_N.c_red when true;
    edge out_D_S.c_green when true;
    edge out_D_S.c_red when true;
    edge out_U_N.c_green when true;
    edge out_U_N.c_red when true;
    edge out_U_S.c_green when true;
    edge out_U_S.c_red when true;
    edge pad_N.c_close when true;
    edge pad_N.c_open when true;
    edge pad_N.c_stop when true;
    edge pad_S.c_close when true;
    edge pad_S.c_open when true;
    edge pad_S.c_stop when true;
end
requirement invariant emergencystop.pushed disables in_D_N.c_green;
requirement invariant emergencystop.pushed disables in_D_S.c_green;
requirement invariant emergencystop.pushed disables in_U_N.c_green;
requirement invariant emergencystop.pushed disables in_U_S.c_green;
requirement invariant emergencystop.pushed disables in_D_N.c_redgreen;
requirement invariant emergencystop.pushed disables in_D_S.c_redgreen;
requirement invariant emergencystop.pushed disables in_U_N.c_redgreen;
requirement invariant emergencystop.pushed disables in_U_S.c_redgreen;
requirement invariant emergencystop.pushed disables out_D_N.c_green;
requirement invariant emergencystop.pushed disables out_D_S.c_green;
requirement invariant emergencystop.pushed disables out_U_N.c_green;
requirement invariant emergencystop.pushed disables out_U_S.c_green;
requirement invariant emergencystop.pushed disables pad_N.c_open;
requirement invariant emergencystop.pushed disables pad_S.c_open;
requirement invariant emergencystop.pushed disables pad_N.c_close;
requirement invariant emergencystop.pushed disables pad_S.c_close;
requirement invariant emergencystop.pushed disables culvert_N.c_enable;
requirement invariant emergencystop.pushed disables culvert_S.c_enable;
requirement invariant emergencystop.pushed disables gate_D_N.c_open;
requirement invariant emergencystop.pushed disables gate_D_S.c_open;
requirement invariant emergencystop.pushed disables gate_U_N.c_open;
requirement invariant emergencystop.pushed disables gate_U_S.c_open;
requirement invariant emergencystop.pushed disables gate_D_N.c_close;
requirement invariant emergencystop.pushed disables gate_D_S.c_close;
requirement invariant emergencystop.pushed disables gate_U_N.c_close;
requirement invariant emergencystop.pushed disables gate_U_S.c_close;
requirement invariant culvert_N.S.flow or culvert_N.A.open or culvert_S.S.flow or culvert_S.A.open or not gate_U_N.S.closed or gate_U_N.Dir.opening or not gate_U_S.S.closed or gate_U_S.Dir.opening disables pad_N.c_open;
requirement invariant culvert_N.S.flow or culvert_N.A.open or culvert_S.S.flow or culvert_S.A.open or not gate_U_N.S.closed or gate_U_N.Dir.opening or not gate_U_S.S.closed or gate_U_S.Dir.opening disables pad_S.c_open;
requirement invariant not pad_N.S1.closed or not pad_N.S2.closed or not pad_N.S3.closed or pad_N.A.opening or not pad_S.S1.closed or not pad_S.S2.closed or not pad_S.S3.closed or pad_S.A.opening or not gate_D_N.S.closed or gate_D_N.Dir.opening or not gate_D_S.S.closed or gate_D_S.Dir.opening disables culvert_N.c_enable;
requirement invariant not pad_N.S1.closed or not pad_N.S2.closed or not pad_N.S3.closed or pad_N.A.opening or not pad_S.S1.closed or not pad_S.S2.closed or not pad_S.S3.closed or pad_S.A.opening or not gate_D_N.S.closed or gate_D_N.Dir.opening or not gate_D_S.S.closed or gate_D_S.Dir.opening disables culvert_S.c_enable;
requirement invariant culvert_N.S.flow or culvert_N.A.open or culvert_S.S.flow or culvert_S.A.open or not gate_U_N.S.closed or gate_U_N.Dir.opening or not gate_U_S.S.closed or gate_U_S.Dir.opening or s_equal_D.off disables gate_D_N.c_open;
requirement invariant culvert_N.S.flow or culvert_N.A.open or culvert_S.S.flow or culvert_S.A.open or not gate_U_N.S.closed or gate_U_N.Dir.opening or not gate_U_S.S.closed or gate_U_S.Dir.opening or s_equal_D.off disables gate_D_S.c_open;
requirement invariant not pad_N.S1.closed or not pad_N.S2.closed or not pad_N.S3.closed or pad_N.A.opening or not pad_S.S1.closed or not pad_S.S2.closed or not pad_S.S3.closed or pad_S.A.opening or not gate_D_N.S.closed or gate_D_N.Dir.opening or not gate_D_S.S.closed or gate_D_S.Dir.opening or s_equal_U.off disables gate_U_N.c_open;
requirement invariant not pad_N.S1.closed or not pad_N.S2.closed or not pad_N.S3.closed or pad_N.A.opening or not pad_S.S1.closed or not pad_S.S2.closed or not pad_S.S3.closed or pad_S.A.opening or not gate_D_N.S.closed or gate_D_N.Dir.opening or not gate_D_S.S.closed or gate_D_S.Dir.opening or s_equal_U.off disables gate_U_S.c_open;
requirement invariant out_D_N.S.green or out_D_N.A.green or out_D_S.S.green or out_D_S.A.green or not gate_D_N.S.open or gate_D_N.Dir.closing or not gate_D_S.S.open or gate_D_S.Dir.closing disables in_D_N.c_green;
requirement invariant out_D_N.S.green or out_D_N.A.green or out_D_S.S.green or out_D_S.A.green or not gate_D_N.S.open or gate_D_N.Dir.closing or not gate_D_S.S.open or gate_D_S.Dir.closing disables in_D_S.c_green;
requirement invariant out_U_N.S.green or out_U_N.A.green or out_U_S.S.green or out_U_S.A.green or not gate_U_N.S.open or gate_U_N.Dir.closing or not gate_U_S.S.open or gate_U_S.Dir.closing disables in_U_N.c_green;
requirement invariant out_U_N.S.green or out_U_N.A.green or out_U_S.S.green or out_U_S.A.green or not gate_U_N.S.open or gate_U_N.Dir.closing or not gate_U_S.S.open or gate_U_S.Dir.closing disables in_U_S.c_green;
requirement invariant in_D_N.S.green or in_D_N.A.green or in_D_S.S.green or in_D_S.A.green or not gate_D_N.S.open or gate_D_N.Dir.closing or not gate_D_S.S.open or gate_D_S.Dir.closing disables out_D_N.c_green;
requirement invariant in_D_N.S.green or in_D_N.A.green or in_D_S.S.green or in_D_S.A.green or not gate_D_N.S.open or gate_D_N.Dir.closing or not gate_D_S.S.open or gate_D_S.Dir.closing disables out_D_S.c_green;
requirement invariant in_U_N.S.green or in_U_N.A.green or in_U_S.S.green or in_U_S.A.green or not gate_U_N.S.open or gate_U_N.Dir.closing or not gate_U_S.S.open or gate_U_S.Dir.closing disables out_U_N.c_green;
requirement invariant in_U_N.S.green or in_U_N.A.green or in_U_S.S.green or in_U_S.A.green or not gate_U_N.S.open or gate_U_N.Dir.closing or not gate_U_S.S.open or gate_U_S.Dir.closing disables out_U_S.c_green;
requirement invariant not(in_D_N.S.red or in_D_N.S.redred) or not(in_D_N.A.red or in_D_N.A.redred) or not(in_D_S.S.red or in_D_S.S.redred) or not(in_D_S.A.red or in_D_S.A.redred) or not out_D_N.S.red or not out_D_N.A.red or not out_D_S.S.red or not out_D_S.A.red disables gate_D_N.c_close;
requirement invariant not(in_D_N.S.red or in_D_N.S.redred) or not(in_D_N.A.red or in_D_N.A.redred) or not(in_D_S.S.red or in_D_S.S.redred) or not(in_D_S.A.red or in_D_S.A.redred) or not out_D_N.S.red or not out_D_N.A.red or not out_D_S.S.red or not out_D_S.A.red disables gate_D_S.c_close;
requirement invariant not(in_U_N.S.red or in_U_N.S.redred) or not(in_U_N.A.red or in_U_N.A.redred) or not(in_U_S.S.red or in_U_S.S.redred) or not(in_U_S.A.red or in_U_S.A.redred) or not out_U_N.S.red or not out_U_N.A.red or not out_U_S.S.red or not out_U_S.A.red disables gate_U_N.c_close;
requirement invariant not(in_U_N.S.red or in_U_N.S.redred) or not(in_U_N.A.red or in_U_N.A.redred) or not(in_U_S.S.red or in_U_S.S.redred) or not(in_U_S.A.red or in_U_S.A.redred) or not out_U_N.S.red or not out_U_N.A.red or not out_U_S.S.red or not out_U_S.A.red disables gate_U_S.c_close;
